package POSGui;

import java.util.ArrayList;
import java.util.HashMap;

import POSTagger.POSTagger;



/**
 *
 * @author rrezzik
 */
public class POSGui extends javax.swing.JFrame {

	private POSTagger tagger;
	private HashMap<String, String> tagDesc;
	private static final String [] colName = { "Word", "POS Tag", "Tag Summary" };
	/** Creates new form GUI */
	public POSGui(POSTagger tagger) {
		super("Rafik's Super Awesome Parts of Speech Tagger!");
		initComponents();
		this.tagger = tagger;
		tagDesc = new HashMap<String, String>();
		tagDesc.put("VN", "verb, past participle");
		tagDesc.put("TO", "infinitive marker to");
		tagDesc.put("N", "Noun, singular and plural");
		tagDesc.put("MOD", "modal auxiliary (can, should, will)");
		tagDesc.put("VBG+TO", "verb, present participle/gerund");
		tagDesc.put("FW", "foreign word (hyphenated before regular tag)");
		tagDesc.put("NP", "proper noun or part of name phrase");
		tagDesc.put("VG", "verb, present participle/gerund");
		//tagDesc.put("NB+PPO", value)
		tagDesc.put("VD", "verb, past tense");
		tagDesc.put("DET", "article");
		tagDesc.put("V", "verb, base form");
		tagDesc.put("P", "nominal pronoun (everybody, nothing)");
		tagDesc.put("PRO", "possessive nominal pronoun");
		tagDesc.put("NUM", "cardinal numeral (one, two, 2, etc.)");
		tagDesc.put("VBZ", "verb, 3rd. singular present");
		tagDesc.put("WH", "wh- determiner (what, which)");
		tagDesc.put("EX", "existential there");
		tagDesc.put("ADV", "adverb");
		tagDesc.put("UH", "interjection, exclamation");
		tagDesc.put("CNJ", "conjunction");
		tagDesc.put("ADJ", "adjective");
		
		
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		tagButton = new javax.swing.JButton();
		tagSentenceField = new javax.swing.JTextField();
		jScrollPane2 = new javax.swing.JScrollPane();
		tagTable = new javax.swing.JTable();
		tagSentenceLabel = new javax.swing.JLabel();


		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		tagButton.setText("Tag It!");
		tagButton.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				tagButtonActionPerformed(evt);
			}
		});

		tagSentenceField.setText("Enter a sentence...");

		tagTable.setModel(new javax.swing.table.DefaultTableModel(
				new Object [][] {
						{null, null, null},
						{null, null, null},
						{null, null, null},
						{null, null, null}
				},
				new String [] {
						"Word", "POS Tag", "Tag Meaning"
				}
				));
		jScrollPane2.setViewportView(tagTable);

		tagSentenceLabel.setText("Please enter a sentence and this super awesome POS tagger will tag the words.");

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
										.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
												.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
												.addComponent(tagSentenceLabel))
												.addGap(85, 85, 85))
												.addGroup(layout.createSequentialGroup()
														.addComponent(tagSentenceField, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
														.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
														.addComponent(tagButton)
														.addContainerGap())))
				);
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup()
						.addGap(16, 16, 16)
						.addComponent(tagSentenceLabel)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
								.addComponent(tagSentenceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addComponent(tagButton))
								.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
								.addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 347, javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(171, 171, 171))
				);

		pack();
	}// </editor-fold>

	private void tagButtonActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		// take what is in sententfield
		String sentence = tagSentenceField.getText();
		if (sentence.endsWith("."))
			sentence = sentence.substring(0, sentence.length() - 1);

		String[] words = sentence.split("\\s+");
		tagTable.setSize(3, words.length);
		
		String [][] data = new String[words.length][3];
		ArrayList<String> tags = tagger.tagSentence(sentence);
		tagTable.setModel(new javax.swing.table.DefaultTableModel(data, colName));

		for (int i = 0; i < tags.size(); i++) {
			//tagTable.setValueAt(tags.get(i), i, 0);
			data[i][0] = words[i];
			data[i][1] = tags.get(i);
			data[i][2] = tagDesc.get(tags.get(i));
		}
		tagTable.setModel(new javax.swing.table.DefaultTableModel(data, colName));

	}


	// Variables declaration - do not modify
	private javax.swing.JScrollPane jScrollPane2;
	private javax.swing.JButton tagButton;
	private javax.swing.JTextField tagSentenceField;
	private javax.swing.JLabel tagSentenceLabel;
	private javax.swing.JTable tagTable;
	// End of variables declaration
}